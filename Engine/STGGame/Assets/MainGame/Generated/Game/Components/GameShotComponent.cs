//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public STGU3D.ShotComponent shot { get { return (STGU3D.ShotComponent)GetComponent(GameComponentsLookup.Shot); } }
    public bool hasShot { get { return HasComponent(GameComponentsLookup.Shot); } }

    public void AddShot(float newInterval, float newNextFireTime, bool newIsFiring) {
        var index = GameComponentsLookup.Shot;
        var component = (STGU3D.ShotComponent)CreateComponent(index, typeof(STGU3D.ShotComponent));
        component.interval = newInterval;
        component.nextFireTime = newNextFireTime;
        component.isFiring = newIsFiring;
        AddComponent(index, component);
    }

    public void ReplaceShot(float newInterval, float newNextFireTime, bool newIsFiring) {
        var index = GameComponentsLookup.Shot;
        var component = (STGU3D.ShotComponent)CreateComponent(index, typeof(STGU3D.ShotComponent));
        component.interval = newInterval;
        component.nextFireTime = newNextFireTime;
        component.isFiring = newIsFiring;
        ReplaceComponent(index, component);
    }

    public void RemoveShot() {
        RemoveComponent(GameComponentsLookup.Shot);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherShot;

    public static Entitas.IMatcher<GameEntity> Shot {
        get {
            if (_matcherShot == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Shot);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherShot = matcher;
            }

            return _matcherShot;
        }
    }
}
